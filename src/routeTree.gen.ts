/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ThirdImport } from './routes/third'
import { Route as SecondImport } from './routes/second'
import { Route as FourthImport } from './routes/fourth'
import { Route as FirstImport } from './routes/first'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ThirdRoute = ThirdImport.update({
  id: '/third',
  path: '/third',
  getParentRoute: () => rootRoute,
} as any)

const SecondRoute = SecondImport.update({
  id: '/second',
  path: '/second',
  getParentRoute: () => rootRoute,
} as any)

const FourthRoute = FourthImport.update({
  id: '/fourth',
  path: '/fourth',
  getParentRoute: () => rootRoute,
} as any)

const FirstRoute = FirstImport.update({
  id: '/first',
  path: '/first',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/first': {
      id: '/first'
      path: '/first'
      fullPath: '/first'
      preLoaderRoute: typeof FirstImport
      parentRoute: typeof rootRoute
    }
    '/fourth': {
      id: '/fourth'
      path: '/fourth'
      fullPath: '/fourth'
      preLoaderRoute: typeof FourthImport
      parentRoute: typeof rootRoute
    }
    '/second': {
      id: '/second'
      path: '/second'
      fullPath: '/second'
      preLoaderRoute: typeof SecondImport
      parentRoute: typeof rootRoute
    }
    '/third': {
      id: '/third'
      path: '/third'
      fullPath: '/third'
      preLoaderRoute: typeof ThirdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/first': typeof FirstRoute
  '/fourth': typeof FourthRoute
  '/second': typeof SecondRoute
  '/third': typeof ThirdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/first': typeof FirstRoute
  '/fourth': typeof FourthRoute
  '/second': typeof SecondRoute
  '/third': typeof ThirdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/first': typeof FirstRoute
  '/fourth': typeof FourthRoute
  '/second': typeof SecondRoute
  '/third': typeof ThirdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/first' | '/fourth' | '/second' | '/third'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/first' | '/fourth' | '/second' | '/third'
  id: '__root__' | '/' | '/first' | '/fourth' | '/second' | '/third'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FirstRoute: typeof FirstRoute
  FourthRoute: typeof FourthRoute
  SecondRoute: typeof SecondRoute
  ThirdRoute: typeof ThirdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FirstRoute: FirstRoute,
  FourthRoute: FourthRoute,
  SecondRoute: SecondRoute,
  ThirdRoute: ThirdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/first",
        "/fourth",
        "/second",
        "/third"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/first": {
      "filePath": "first.tsx"
    },
    "/fourth": {
      "filePath": "fourth.tsx"
    },
    "/second": {
      "filePath": "second.tsx"
    },
    "/third": {
      "filePath": "third.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
